
enum MeetingStatus {
  PENDING
  ACCEPTED
  DECLINED
}

type Participant @aws_iam @aws_api_key {
  id: ID!
  fullname: String!
  email: String!
  meetingName: ID
  status: MeetingStatus
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Meeting @aws_iam @aws_api_key {
  id: ID!
  fullName: String!
  location: String!
  date: String!
  Participants(filter: ModelParticipantFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelParticipantConnection
  Hosts(filter: ModelHostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelHostConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Host @aws_iam @aws_api_key {
  id: ID!
  fullName: String
  email: String
  meetingName: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelParticipantConnection @aws_api_key @aws_iam {
  items: [Participant]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelMeetingStatusInput {
  eq: MeetingStatus
  ne: MeetingStatus
}

input ModelParticipantFilterInput {
  id: ModelIDInput
  fullname: ModelStringInput
  email: ModelStringInput
  meetingName: ModelIDInput
  status: ModelMeetingStatusInput
  and: [ModelParticipantFilterInput]
  or: [ModelParticipantFilterInput]
  not: ModelParticipantFilterInput
}

type Query {
  getParticipant(id: ID!): Participant @aws_api_key @aws_iam
  listParticipants(filter: ModelParticipantFilterInput, limit: Int, nextToken: String): ModelParticipantConnection @aws_api_key @aws_iam
  syncParticipants(filter: ModelParticipantFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelParticipantConnection @aws_api_key @aws_iam
  participantsByMeetingName(meetingName: ID!, sortDirection: ModelSortDirection, filter: ModelParticipantFilterInput, limit: Int, nextToken: String): ModelParticipantConnection @aws_api_key @aws_iam
  getMeeting(id: ID!): Meeting @aws_api_key @aws_iam
  listMeetings(filter: ModelMeetingFilterInput, limit: Int, nextToken: String): ModelMeetingConnection @aws_api_key @aws_iam
  syncMeetings(filter: ModelMeetingFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelMeetingConnection @aws_api_key @aws_iam
  getHost(id: ID!): Host @aws_api_key @aws_iam
  listHosts(filter: ModelHostFilterInput, limit: Int, nextToken: String): ModelHostConnection @aws_api_key @aws_iam
  syncHosts(filter: ModelHostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelHostConnection @aws_api_key @aws_iam
  hostsByMeetingName(meetingName: ID!, sortDirection: ModelSortDirection, filter: ModelHostFilterInput, limit: Int, nextToken: String): ModelHostConnection @aws_api_key @aws_iam
}

input ModelParticipantConditionInput {
  fullname: ModelStringInput
  email: ModelStringInput
  meetingName: ModelIDInput
  status: ModelMeetingStatusInput
  and: [ModelParticipantConditionInput]
  or: [ModelParticipantConditionInput]
  not: ModelParticipantConditionInput
}

input CreateParticipantInput {
  id: ID
  fullname: String!
  email: String!
  meetingName: ID
  status: MeetingStatus
  _version: Int
}

input UpdateParticipantInput {
  id: ID!
  fullname: String
  email: String
  meetingName: ID
  status: MeetingStatus
  _version: Int
}

input DeleteParticipantInput {
  id: ID!
  _version: Int
}

type Mutation {
  createParticipant(input: CreateParticipantInput!, condition: ModelParticipantConditionInput): Participant @aws_api_key @aws_iam
  updateParticipant(input: UpdateParticipantInput!, condition: ModelParticipantConditionInput): Participant @aws_api_key @aws_iam
  deleteParticipant(input: DeleteParticipantInput!, condition: ModelParticipantConditionInput): Participant @aws_api_key @aws_iam
  createMeeting(input: CreateMeetingInput!, condition: ModelMeetingConditionInput): Meeting @aws_api_key @aws_iam
  updateMeeting(input: UpdateMeetingInput!, condition: ModelMeetingConditionInput): Meeting @aws_api_key @aws_iam
  deleteMeeting(input: DeleteMeetingInput!, condition: ModelMeetingConditionInput): Meeting @aws_api_key @aws_iam
  createHost(input: CreateHostInput!, condition: ModelHostConditionInput): Host @aws_api_key @aws_iam
  updateHost(input: UpdateHostInput!, condition: ModelHostConditionInput): Host @aws_api_key @aws_iam
  deleteHost(input: DeleteHostInput!, condition: ModelHostConditionInput): Host @aws_api_key @aws_iam
}

input ModelSubscriptionParticipantFilterInput {
  id: ModelSubscriptionIDInput
  fullname: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  meetingName: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  and: [ModelSubscriptionParticipantFilterInput]
  or: [ModelSubscriptionParticipantFilterInput]
}

type Subscription {
  onCreateParticipant(filter: ModelSubscriptionParticipantFilterInput): Participant @aws_subscribe(mutations: ["createParticipant"]) @aws_api_key @aws_iam
  onUpdateParticipant(filter: ModelSubscriptionParticipantFilterInput): Participant @aws_subscribe(mutations: ["updateParticipant"]) @aws_api_key @aws_iam
  onDeleteParticipant(filter: ModelSubscriptionParticipantFilterInput): Participant @aws_subscribe(mutations: ["deleteParticipant"]) @aws_api_key @aws_iam
  onCreateMeeting(filter: ModelSubscriptionMeetingFilterInput): Meeting @aws_subscribe(mutations: ["createMeeting"]) @aws_api_key @aws_iam
  onUpdateMeeting(filter: ModelSubscriptionMeetingFilterInput): Meeting @aws_subscribe(mutations: ["updateMeeting"]) @aws_api_key @aws_iam
  onDeleteMeeting(filter: ModelSubscriptionMeetingFilterInput): Meeting @aws_subscribe(mutations: ["deleteMeeting"]) @aws_api_key @aws_iam
  onCreateHost(filter: ModelSubscriptionHostFilterInput): Host @aws_subscribe(mutations: ["createHost"]) @aws_api_key @aws_iam
  onUpdateHost(filter: ModelSubscriptionHostFilterInput): Host @aws_subscribe(mutations: ["updateHost"]) @aws_api_key @aws_iam
  onDeleteHost(filter: ModelSubscriptionHostFilterInput): Host @aws_subscribe(mutations: ["deleteHost"]) @aws_api_key @aws_iam
}

type ModelMeetingConnection @aws_api_key @aws_iam {
  items: [Meeting]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelMeetingFilterInput {
  id: ModelIDInput
  fullName: ModelStringInput
  location: ModelStringInput
  date: ModelStringInput
  and: [ModelMeetingFilterInput]
  or: [ModelMeetingFilterInput]
  not: ModelMeetingFilterInput
}

input ModelMeetingConditionInput {
  fullName: ModelStringInput
  location: ModelStringInput
  date: ModelStringInput
  and: [ModelMeetingConditionInput]
  or: [ModelMeetingConditionInput]
  not: ModelMeetingConditionInput
}

input CreateMeetingInput {
  id: ID
  fullName: String!
  location: String!
  date: String!
  _version: Int
}

input UpdateMeetingInput {
  id: ID!
  fullName: String
  location: String
  date: String
  _version: Int
}

input DeleteMeetingInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionMeetingFilterInput {
  id: ModelSubscriptionIDInput
  fullName: ModelSubscriptionStringInput
  location: ModelSubscriptionStringInput
  date: ModelSubscriptionStringInput
  and: [ModelSubscriptionMeetingFilterInput]
  or: [ModelSubscriptionMeetingFilterInput]
}

type ModelHostConnection @aws_iam @aws_api_key {
  items: [Host]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelHostFilterInput {
  id: ModelIDInput
  fullName: ModelStringInput
  email: ModelStringInput
  meetingName: ModelIDInput
  and: [ModelHostFilterInput]
  or: [ModelHostFilterInput]
  not: ModelHostFilterInput
}

input ModelHostConditionInput {
  fullName: ModelStringInput
  email: ModelStringInput
  meetingName: ModelIDInput
  and: [ModelHostConditionInput]
  or: [ModelHostConditionInput]
  not: ModelHostConditionInput
}

input CreateHostInput {
  id: ID
  fullName: String
  email: String
  meetingName: ID
  _version: Int
}

input UpdateHostInput {
  id: ID!
  fullName: String
  email: String
  meetingName: ID
  _version: Int
}

input DeleteHostInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionHostFilterInput {
  id: ModelSubscriptionIDInput
  fullName: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  meetingName: ModelSubscriptionIDInput
  and: [ModelSubscriptionHostFilterInput]
  or: [ModelSubscriptionHostFilterInput]
}

